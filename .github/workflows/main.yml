name: Build Docker image

on:
  push:
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME2: ${{ github.repository }}/test

jobs:
  BuildImage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        file: dockerfiles/ubuntu/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_TESTS=OFF
          BUILD_PYTHON=ON

    - name: Create Docker container
      run: docker create --name extract-container ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Copy .so file from Docker container
      run: docker cp extract-container:/path/to/library.so ${{ github.workspace }}/library.so

    - name: Upload .so file as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: library.so
        path: ${{ github.workspace }}/library.so

  BuildTest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME2 }}

    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        file: dockerfiles/ubuntu/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  Upload:
    runs-on: ubuntu-latest
    needs: BuildImage 

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download .so file
      uses: actions/download-artifact@v3
      with:
        name: library.so
        path: nvidiagrpc/build

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel twine

    - name: Build package
      run: |
        python setup.py sdist bdist_wheel

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        python -m twine upload dist/*

    - name: Clean up
      if: always()
      run: |
        rm -rf build dist *.egg-info

  Test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/OmarSiwy/gRPCNvidia/test:main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set ownership
        run: |
          # Workaround for https://github.com/actions/runner/issues/2033
          chown -R $(id -u):$(id -g) $PWD

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image with Google Tests
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          load: true
          build-args: |
            BUILD_TESTS=ON
            BUILD_PYTHON=OFF

      - name: Run Google Test
        run: |
          cd build && ctest
